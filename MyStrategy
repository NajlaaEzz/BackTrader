#premiere commande :
!pip install backtrader
#code: 
from __future__ import (absolute_import, division, print_function,
                        unicode_literals)
import backtrader as bt
from datetime import datetime

#Define the TestStrategy Class
class TestStrategy(bt.Strategy):
    params = dict(
        pfast=20,  # period for the fast moving average
        pslow=70   # period for the slow moving average
    )
    # This logging function is called whenever we need to output something, for example, close
    # prices in our strategy
    def log(self, txt, dt=None):
        dt = dt or self.datas[0].datetime.date(0)
        print('%s, %s' % (dt.isoformat(), txt))

    # This method is called once when the cerebro object is initialized.
    def __init__(self):
        # Keep a reference to the "close" line in the data[0] dataseries. We can obtain other
        # lines using this dataseries if needed
        self.dataclose = self.datas[0].close
        sma1 = bt.ind.SMA(period=self.p.pfast)  # fast moving average
        sma2 = bt.ind.SMA(period=self.p.pslow)  # slow moving average
        self.crossover = bt.ind.CrossOver(sma1, sma2)  # crossover signal

    def next(self):
        # This function is called on each bar of self.datas[0]. This is where the majority of our
        # strategy based logic would reside.
        if not self.position:  # not in the market
            if self.crossover > 0:  # if fast crosses slow to the upside
                print("Buy")
                self.buy()  # enter long

        elif self.crossover < 0:  # in the market & cross to the downside
            print("Sell")
            self.close()  # close long position
        
        # Simply log the closing price of the series from the reference      
        # self.log('Close, %.2f' % self.dataclose[0])   
#_____________________________________________________________________________________________

# Instantiate an object of the bt.Cerebro class
cerebro = bt.Cerebro()

# Create the Data Feed
data = bt.feeds.YahooFinanceData(
    dataname='/content/amz.csv',
    )

# Add the data feed to the cerebro object
cerebro.adddata(data)

# Add money to cerebro.broker
cerebro.broker.setcash(60000.0)

# Add the strategy to the cerebro object
cerebro.addstrategy(TestStrategy)

'''
Add comission charges if needed
'''

# Run the strategy and watch the log
print('Starting Portfolio Value: %.2f' % cerebro.broker.getvalue())
cerebro.run()
print('Final Portfolio Value: %.2f' % cerebro.broker.getvalue())

figure = cerebro.plot()[0][0]
figure.savefig("test.png",dpi=400)
